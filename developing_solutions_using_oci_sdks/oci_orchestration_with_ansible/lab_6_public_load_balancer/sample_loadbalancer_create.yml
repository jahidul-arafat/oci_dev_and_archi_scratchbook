---
- name: Create a Public Load Balancer instance with either Public/Private Instances and Print the details
  hosts: localhost
  collections:
    - oracle.oci

  vars:
    http_port: 80
    https_port: 443

  vars_prompt:
    # Set Load Balancer: Name, Shape, Backend Set (BS) name, BS policy
    - name: lb_name
      prompt: "Enter LoadBalancer Name:"
      default: "ansible-sample-create-lb-lb"
      private: no
    - name: lb_shape
      prompt: "Choose LoadBalancer Shape:"
      default: "100Mbps"
      private: no
    - name: lb_backend_set_name
      prompt: "Enter LB Backend Set Name:"
      default: "ansible-sample-create-lb-BS"
      private: no
    - name: lb_backend_set_policy
      prompt: "Choose LB Backend Set Policy (w-RR/ipHash/LC):"
      default: "ROUND_ROBIN"
      private: no

    # Backend servers in the Backend Set
    - name: backend_server_one_private_ip
      prompt: "Enter Backend Server-01 Private IP: "
      default: "10.0.0.161"
      private: no
    - name: backend_server_two_private_ip
      prompt: "Enter Backend Server-02 Private IP: "
      default: "10.0.0.244"
      private: no

    # Import the Root-CA cert, remote_client's private key and signed CSR
    - name: root_ca_certificate
      prompt: "Enter ROOT CA Certificate"
      default: "./ca_certificates/ca.crt"
      private: no
    - name: remote_client_private_key
      prompt: "Enter the Remote-Client's Private Key"
      default: "./ca_certificates/ansibleclient.key"
      private: no
    - name: remote_client_public_certificate
      prompt: "Enter the Remote-Client's Signed CSR returned from ROOT-CA:"
      default: "./ca_certificates/ansibleclient.crt"
      private: no

    # Set the name for the certificate which includes (ca.crt, ansibleclient.key and ansibleclient.crt) and is used in the HTTPS listner
    - name: lb_certificate_name
      prompt: "Enter a sample certificate name which will be used later for references in HTTPS Listener"
      default: "ansible-sample-create-lb-cert-ls"
      private: no

    # Set the http and https listener name
    - name: http_listener_name
      prompt: "Set HTTP Listener name"
      default: "ansible-sample-create-lb-http-listener"
      private: no
    - name: https_listener_name
      prompt: "Set HTTPS Listener name"
      default: "ansible-sample-create-lb-https-listener"
      private: no

    # Set the Compartment of Operation i.e. sandbox
    - name: compartment_id
      prompt: "Enter Your COMPARTMENT OCID:"
      default: "ocid1.compartment.oc1..aaaaaaaa5hplc4q67l76kzeygvcbbu73da3kxhndhogtfvxgwtpd2xzayecq" # sandbox compartment
      private: no
    - name: tenancy_ocid
      prompt: "Enter Tenancy OCID"
      default: "ocid1.tenancy.oc1..aaaaaaaanbynfzds6esghootofhfrbnahj3aeihhd7e3ghrn37cf452ywo3q"
      private: no

    - name: subnet_id_ad1 #oci-sandbox-vcn Public Subnet 10.0.0.0/24
      prompt: "Enter Your Subnet OCID [Public/Private]:"  #in Mumbai, there is only one AD. So even if there is a single AD, two different FDs can ensure fault tolerance
      default: "ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaaiw4njnl74may6r4p3frgth5laqfr6kl6g52kkevolx43r2ugx7ra"
      private: no

  tasks:
    - block:
      # Setup the Root-CA certificate, and remote-client certificate and csr
      - import_tasks: setup_root_ca.yaml

      # Prerequisite: Read the contents of the certificates and keys
      - set_fact:
          SAMPLE_CA_CERTIFICATE: "{{lookup('file',root_ca_certificate)}}"
          SAMPLE_PRIVATE_KEY: "{{lookup('file', remote_client_private_key)}}"
          SAMPLE_PUBLIC_CERTIFICATE: "{{lookup('file',remote_client_public_certificate)}}"

      # Task-01: Create a Public Load Balancer.   << Error is creating the task. Service Limit + Internal Server Error.
      # Debug the Error <<----------- [unsolved]
      # Inputs: compt_ocid, lb_name, lb_shape, public_subnet_ocid
      # return: lb.id lb.ip
      - name: Create an Internet facing Load Balancer
        oci_loadbalancer_load_balancer:
          is_private: false # defaull is: null;
          compartment_id: "{{compartment_id}}"
          name: "{{lb_name}}"
          shape_name: "{{lb_shape}}"
          subnet_ids: #list # L[0]
            - "{{subnet_id_ad1}}"
          state: present
        register: result
      - debug:
          msg: "Load Balancer Details: {{result.load_balancer}}"
      - set_fact:
          public_load_balancer_id: "{{result.load_balancer.id}}"
          public_load_balancer_ip_addresses: "{{result.load_balancer.ip_addresses}}"  # this is a LIST

      # Task-02: Create Backend set
      # 3x tasks
      # 2.1 Create a Backend set and name it and configure the health check policy
      # input: lb_id, bs_name, bs_policy: RR, health_checker: {protocol, port, interval, timeout, retries, return_code, url_path, regex}
      - name: Create Backend Set
        oci_loadbalancer_backend_set:
          load_balancer_id: "{{public_load_balancer_id}}"
          name: "{{lb_backend_set_name}}"
          policy: "{{lb_backend_set_policy}}" #round_robin
          health_checker:
            protocol: "HTTP"
            port: "{{http_port}}"
            interval_in_millis: 10000
            timeout_in_millis: 3000
            retries: 3
            return_code: 200
            url_path: "/"
            response_body_regex: ".*"
          state: present

      # 2.2 Add 2x Backend Servers in Backend Set
      # A. Add Backend server 01 into the Backend Set
      - name: Add Backend Server 01 into the Backend Set
        oci_loadbalancer_backend:
          load_balancer_id: "{{public_load_balancer_id}}"
          backend_set_name: "{{lb_backend_set_name}}"
          ip_address: "{{backend_server_one_private_ip}}"
          port: "{{http_port}}"
          backup: False     # If True, LB will treat this server as backup unit and will not forward any ingress traffic to this backend unit
          drain: False      # If True, LB will drain this server and server marked as `drain`, doesn't receive any ingress traffic
          offline: False    # If True, LB will treat this server as offline and offline server doesn't receive any ingress traffic
          weight: 1         # A server weighted `3` receives 3 times the number of connections as a server weighted `1`
          state: present

      # B. Add Backend Server 02 into the Backend Set
      - name: Add Backend Server 02 into the Backend Set
        oci_loadbalancer_backend:
          load_balancer_id: "{{public_load_balancer_id}}"
          backend_set_name: "{{lb_backend_set_name}}"
          ip_address: "{{backend_server_two_private_ip}}"
          port: "{{http_port}}"
          backup: False
          drain: False
          offline: False
          weight: 1
          state: present

      # Task-03: Configure Listener
      # 3.1 Load Certificates and Private Key for Listener. Certificate/Key contents will be loaded as string
      - name: Load Certificates for Listener
        oci_loadbalancer_certificate:
          load_balancer_id: "{{public_load_balancer_id}}"
          certificate_name: "{{lb_certificate_name}}"  #<<<----
          ca_certificate: "{{SAMPLE_CA_CERTIFICATE}}"
          private_key: "{{SAMPLE_PRIVATE_KEY}}"
          public_certificate: "{{SAMPLE_PUBLIC_CERTIFICATE}}"
          state: present

      # 3.2 Create Listener for HTTP traffic
      - name: Create Listener for HTTP traffic
        oci_loadbalancer_listener:
          load_balancer_id: "{{public_load_balancer_id}}"
          name: "{{http_listener_name}}"
          default_backend_set_name: "{{lb_backend_set_name}}"
          port: "{{http_port}}"
          protocol: "HTTP"
          connection_configuration:
            idle_timeout: 300
          state: present

      # 3.3 Create Listener for HTTPS traffic
      - name: Create Listener for HTTPS traffic
        oci_loadbalancer_listener:
          load_balancer_id: "{{public_load_balancer_id}}"
          name: "{{https_listener_name}}"
          default_backend_set_name: "{{lb_backend_set_name}}"
          port: "{{https_port}}"
          protocol: "HTTP"  # protocol is not HTTPS. I set HTTPS earlier and it throws an error. So, better set HTTP
          ssl_configuration:
            certificate_name: "{{lb_certificate_name}}" #<<<----
            verify_peer_certificate: False    # if TRUE, then Load Balancer will verify Peer Certificate # Must be `True` in production environment
          state: present

      # Task-04: Check whether Load Balancer able to access Backend Server
      - name: Check whether Load Balancer able to access Backend Server
        uri:
          url: "http://{{public_load_balancer_ip_addresses[0].ip_address}}/"
          body_format: json
          timeout: 600
        register: result
        retries: 10
        delay: 60
        until: result['status']|default(0) == 200
      - debug:
          msg: "Load Balancer IP Address details: {{public_load_balancer_ip_addresses}}"

      # Task-05: Get the Load Balancer OCID, which we will use later to terminate the LB
      - name: Print the Load Balancer OCID
        debug:
          msg: "Load Balancer OCID: {{public_load_balancer_id}}"


















